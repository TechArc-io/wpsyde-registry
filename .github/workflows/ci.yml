name: CI

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

# Least-privilege by default
permissions:
  contents: read

jobs:
  validate-json:
    name: Validate registry JSON
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Validate root JSON files
        run: |
          jq -e . index.json > /dev/null
          jq -e . health.json > /dev/null

      - name: Validate component manifests (if any)
        run: |
          if [ -d components ]; then
            find components -type f -name "manifest.json" -print0 | xargs -0 -I{} jq -e . {} > /dev/null
          else
            echo "No components directory found, skipping component manifest validation"
          fi

      - name: Check critical files exist
        run: |
          test -f _headers

  format-check:
    name: Check code formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Check formatting
        run: pnpm format:check

  verify-public-key:
    name: Verify public key
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: test -f public-key.pem

  immutable-versions:
    name: Enforce immutable versioned paths
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Check for meaningful changes in component manifests
        run: |
          base_ref="${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'HEAD^' }}"
          GITHUB_BASE_REF="$base_ref" GITHUB_SHA="${{ github.sha }}" node scripts/check-immutable-changes.js

  validate-archive-integrity:
    name: Validate archives.integrity (sha256)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update -y && sudo apt-get install -y jq
      - name: Check each manifest vs zip hash
        shell: bash
        run: |
          set -euo pipefail
          if [ -d components ]; then
            find components -type f -name manifest.json | while read -r m; do
              zip_path="$(dirname "$m")/component.zip"
              test -f "$zip_path"
              calc="sha256-$(openssl dgst -sha256 -binary "$zip_path" | openssl base64 -A)"
              want="$(jq -r '.archives.integrity' "$m")"
              if [ "$calc" != "$want" ]; then
                echo "Integrity mismatch: $zip_path"
                echo " expected: $want"
                echo "   actual: $calc"
                exit 1
              fi
            done
          else
            echo "No components directory found, skipping archive integrity check"
          fi

  verify-manifest-signatures:
    name: Verify manifest signatures (Ed25519)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update -y && sudo apt-get install -y jq nodejs npm
      - name: Install verifier deps
        run: npm i tweetnacl tweetnacl-util
      - name: Verify signatures
        run: |
          node -e "
          const fs = require('fs');
          const nacl = require('tweetnacl');
          const util = require('tweetnacl-util');

                    if (!fs.existsSync('public-key.pem')) {
            console.log('No public-key.pem found, skipping signature verification');
            process.exit(0);
          }

          // Parse PEM format correctly
          const pemContent = fs.readFileSync('public-key.pem', 'utf8');
          const pubKeyMatch = pemContent.match(/-----BEGIN PUBLIC KEY-----\n([\s\S]*?)\n-----END PUBLIC KEY-----/);

          if (!pubKeyMatch) {
            console.log('Invalid PEM format in public-key.pem, skipping signature verification');
            process.exit(0);
          }

          const pubKeyBase64 = pubKeyMatch[1].replace(/\s+/g, '');
          const pubKey = Buffer.from(pubKeyBase64, 'base64');

          // Validate Ed25519 key size (32 bytes)
          if (pubKey.length !== 32) {
            console.log('Invalid Ed25519 public key size: ' + pubKey.length + ' bytes (expected 32), skipping signature verification');
            process.exit(0);
          }

          function canon(obj){ const c = {...obj}; delete c.signature; return JSON.stringify(c); }

          function verifyManifest(path) {
            const m = JSON.parse(fs.readFileSync(path,'utf8'));
            if (!m.signature) { throw new Error(\`Missing signature in \${path}\`); }
            const msg = util.decodeUTF8(canon(m));
            const sig = Buffer.from(m.signature, 'base64');
            if (!nacl.sign.detached.verify(msg, sig, pubKey)) {
              throw new Error(\`Bad signature: \${path}\`);
            }
          }

          function walk(dir){
            for (const f of fs.readdirSync(dir)) {
              const p = \`\${dir}/\${f}\`;
              const st = fs.statSync(p);
              if (st.isDirectory()) walk(p);
              else if (f === 'manifest.json') verifyManifest(p);
            }
          }
          if (fs.existsSync('components')) {
            walk('components');
            console.log('All manifest signatures OK');
          } else {
            console.log('No components directory found, skipping signature verification');
          }
          "
